package nrnoble;

public class Main
{
		public static enum BitMask
		{
			//b00000000 (0b00000000),
			b00000001 (0b00000001), // 1
			b00000010 (0b00000010), // 2
			b00000100 (0b00000100), // 4
			b00001000 (0b00001000), // 8
			b00010000 (0b00010000), // 16
			b00100000 (0b00100000), // 32
			b01000000 (0b01000000), // 64
			b10000000 (0b10000000); // 128
		
//			b10000000 (0b10000000),
//			b01000000 (0b01000000),
//			b00100000 (0b00100000),
//			b00010000 (0b00010000),
//			b00001000 (0b00001000),
//			b00000100 (0b00000100),
//			b00000010 (0b00000010),
//			b00000001 (0b00000001);

			private int value;

		    private BitMask(int value)
		    {
		        this.value = value;
		    }
		}
	

	public Main()
	{
		// Nothing to do here.
	}

	public static void main(String[] args)
	{
		//shift1(1);
		for (short x = 0; x < 9; x++)
		{
			displayIntAsBinary2(x,10);
			
			
		}

	}
	
	/**
	 * Converts a int to a bin string by checking each bit
	 * @param _bin
	 */
	public static void displayIntAsBinary (int _bin)
	{
		String binString = "";
		for (BitMask mask : BitMask.values())
		{
			int result = _bin & mask.value;
			if (result == 0)
			{
				binString += "0";
			}
			else
			{
				binString += "1";
			}
		}
		binString = new StringBuilder(binString).reverse().toString();
		System.out.println(binString);
	}
	
	
	public static void displayIntAsBinary2 (int _bin, int _numOfbits)
	{
		String binString = "";	
		int mask = 1;
		for (int x = 0; x < _numOfbits; x++)
		{	
			int result = (_bin & mask);
			if (result == 0)
			{
				binString += "0";
			}
			else
			{
				binString += "1";
			}
			mask =  (mask << 1);
		}
		binString = new StringBuilder(binString).reverse().toString();
		System.out.println(binString);
	}



}
